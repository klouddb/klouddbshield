// Code generated by MockGen. DO NOT EDIT.
// Source: /home/chandra/workspace/go/src/github.com/klouddb/chandraprivatetestrepo/rds/4.2.0.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	rds "github.com/klouddb/klouddbshield/rds"
	gomock "go.uber.org/mock/gomock"
)

// MockRDSSubscriptionGetter is a mock of RDSSubscriptionGetter interface.
type MockRDSSubscriptionGetter struct {
	ctrl     *gomock.Controller
	recorder *MockRDSSubscriptionGetterMockRecorder
}

// MockRDSSubscriptionGetterMockRecorder is the mock recorder for MockRDSSubscriptionGetter.
type MockRDSSubscriptionGetterMockRecorder struct {
	mock *MockRDSSubscriptionGetter
}

// NewMockRDSSubscriptionGetter creates a new mock instance.
func NewMockRDSSubscriptionGetter(ctrl *gomock.Controller) *MockRDSSubscriptionGetter {
	mock := &MockRDSSubscriptionGetter{ctrl: ctrl}
	mock.recorder = &MockRDSSubscriptionGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRDSSubscriptionGetter) EXPECT() *MockRDSSubscriptionGetterMockRecorder {
	return m.recorder
}

// GetEventSubscription mocks base method.
func (m *MockRDSSubscriptionGetter) GetEventSubscription(ctx context.Context) (*rds.RdsSubscriptions, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEventSubscription", ctx)
	ret0, _ := ret[0].(*rds.RdsSubscriptions)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEventSubscription indicates an expected call of GetEventSubscription.
func (mr *MockRDSSubscriptionGetterMockRecorder) GetEventSubscription(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEventSubscription", reflect.TypeOf((*MockRDSSubscriptionGetter)(nil).GetEventSubscription), ctx)
}

// GetSNSSubscriptions mocks base method.
func (m *MockRDSSubscriptionGetter) GetSNSSubscriptions(ctx context.Context, subToCheck *rds.EventSubscription) (*rds.SNSSubscriptions, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSNSSubscriptions", ctx, subToCheck)
	ret0, _ := ret[0].(*rds.SNSSubscriptions)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSNSSubscriptions indicates an expected call of GetSNSSubscriptions.
func (mr *MockRDSSubscriptionGetterMockRecorder) GetSNSSubscriptions(ctx, subToCheck interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSNSSubscriptions", reflect.TypeOf((*MockRDSSubscriptionGetter)(nil).GetSNSSubscriptions), ctx, subToCheck)
}
