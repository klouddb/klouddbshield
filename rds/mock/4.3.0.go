// Code generated by MockGen. DO NOT EDIT.
// Source: /home/chandra/workspace/go/src/github.com/klouddb/chandraprivatetestrepo/rds/4.3.0.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	model "github.com/klouddb/klouddbshield/model"
	rds "github.com/klouddb/klouddbshield/rds"
	gomock "go.uber.org/mock/gomock"
)

// MockDBGetter is a mock of DBGetter interface.
type MockDBGetter struct {
	ctrl     *gomock.Controller
	recorder *MockDBGetterMockRecorder
}

// MockDBGetterMockRecorder is the mock recorder for MockDBGetter.
type MockDBGetterMockRecorder struct {
	mock *MockDBGetter
}

// NewMockDBGetter creates a new mock instance.
func NewMockDBGetter(ctrl *gomock.Controller) *MockDBGetter {
	mock := &MockDBGetter{ctrl: ctrl}
	mock.recorder = &MockDBGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDBGetter) EXPECT() *MockDBGetterMockRecorder {
	return m.recorder
}

// GetDBMap mocks base method.
func (m *MockDBGetter) GetDBMap(ctx context.Context) (*model.Result, map[string]bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDBMap", ctx)
	ret0, _ := ret[0].(*model.Result)
	ret1, _ := ret[1].(map[string]bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetDBMap indicates an expected call of GetDBMap.
func (mr *MockDBGetterMockRecorder) GetDBMap(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDBMap", reflect.TypeOf((*MockDBGetter)(nil).GetDBMap), ctx)
}

// MockSubscriptionGetter is a mock of SubscriptionGetter interface.
type MockSubscriptionGetter struct {
	ctrl     *gomock.Controller
	recorder *MockSubscriptionGetterMockRecorder
}

// MockSubscriptionGetterMockRecorder is the mock recorder for MockSubscriptionGetter.
type MockSubscriptionGetterMockRecorder struct {
	mock *MockSubscriptionGetter
}

// NewMockSubscriptionGetter creates a new mock instance.
func NewMockSubscriptionGetter(ctrl *gomock.Controller) *MockSubscriptionGetter {
	mock := &MockSubscriptionGetter{ctrl: ctrl}
	mock.recorder = &MockSubscriptionGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSubscriptionGetter) EXPECT() *MockSubscriptionGetterMockRecorder {
	return m.recorder
}

// GetEventSubscription mocks base method.
func (m *MockSubscriptionGetter) GetEventSubscription(ctx context.Context) ([]rds.EventSubscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEventSubscription", ctx)
	ret0, _ := ret[0].([]rds.EventSubscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEventSubscription indicates an expected call of GetEventSubscription.
func (mr *MockSubscriptionGetterMockRecorder) GetEventSubscription(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEventSubscription", reflect.TypeOf((*MockSubscriptionGetter)(nil).GetEventSubscription), ctx)
}
